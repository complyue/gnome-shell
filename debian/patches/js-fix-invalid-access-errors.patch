From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Mon, 4 Dec 2017 19:41:50 -0600
Subject: js: fix invalid-access errors

tweener: Save handlers on target and remove them on destroy

Saving handlers we had using the wrapper as a property of the object and delete
them when resetting the object state.
Without doing this an handler could be called on a destroyed target when this
happens on the onComplete callback.

https://bugzilla.gnome.org/show_bug.cgi?id=791233

dnd: Nullify _dragActor after we've destroyed it, and avoid invalid access

We need to avoid that we use the _dragActor instance after that it has
been destroyed or we'll get errors. We now set it to null when this
happens, protecting any access to that.

Add a DragState enum-like object to keep track of the state
instead of using booleans.

Remove duplicated handler on 'destroy' and just use a generic one.

https://bugzilla.gnome.org/show_bug.cgi?id=791233

workspaceThumbnail: Disconnect from window signals on destruction

Avoid to try to destroy the window clone content more than once
when a window is destroyed, and do it in proper order.

https://bugzilla.gnome.org/show_bug.cgi?id=791233

workspaceThumbnail: Remove WindowClone's from _windows when destroyed

A WindowClone might be destroyed earlier than its MetaWindow counterpart
as its WindowActor could be destroyed earlier, thus when happens it's safer
to remove the clone from the windows list, without waiting for the workspace
to request to do so.

WindowClone now emits a 'destroy' signals earlier enough and this now
triggers a _doRemoveWindow on WorkspaceThumbnail which will lead
to the proper cleanup; keeping track of the signal connections, in
order to avoid callback loops (not really harmful in this case, but
good practice).

https://bugzilla.gnome.org/show_bug.cgi?id=791233

workspace: Disconnect from window signals on destruction

Avoid to try to destroy the window clone content more than once
when a window is destroyed, and do it in proper order.

https://bugzilla.gnome.org/show_bug.cgi?id=791233

workspace: Remove WindowClone's from _windows when destroyed

A WindowClone might be destroyed earlier than its MetaWindow counterpart
as its WindowActor could be destroyed earlier, thus when happens it's safer
to remove the clone from the windows list, without waiting for the workspace
to request to do so.

WindowClone now emits a 'destroy' signals earlier enough and this now
triggers a _doRemoveWindow on WorkspaceThumbnail which will lead
to the proper cleanup; keeping track of the signal connections, in
order to avoid callback loops (not really harmful in this case, but
good practice).

https://bugzilla.gnome.org/show_bug.cgi?id=791233

Bug-GNOME: https://bugzilla.gnome.org/show_bug.cgi?id=791233
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/bionic/+source/gnome-shell/+bug/1747566
Forwarded: yes, https://gitlab.gnome.org/GNOME/gnome-shell/merge_requests/4
---
 js/ui/dnd.js                | 65 +++++++++++++++++++++++++++------------------
 js/ui/tweener.js            | 64 +++++++++++++++++++++++++++++++++++---------
 js/ui/workspace.js          | 26 +++++++++++-------
 js/ui/workspaceThumbnail.js | 21 ++++++++++-----
 4 files changed, 122 insertions(+), 54 deletions(-)

diff --git a/js/ui/dnd.js b/js/ui/dnd.js
index a38607c..431c60d 100644
--- a/js/ui/dnd.js
+++ b/js/ui/dnd.js
@@ -27,6 +27,12 @@ var DragMotionResult = {
     CONTINUE:  3
 };
 
+var DragState = {
+    INIT:      0,
+    DRAGGING:  1,
+    CANCELLED: 2,
+};
+
 var DRAG_CURSOR_MAP = {
     0: Meta.Cursor.DND_UNSUPPORTED_TARGET,
     1: Meta.Cursor.DND_COPY,
@@ -78,6 +84,8 @@ var _Draggable = new Lang.Class({
                                         dragActorOpacity: undefined });
 
         this.actor = actor;
+        this._dragState = DragState.INIT;
+
         if (!params.manualMode) {
             this.actor.connect('button-press-event',
                                this._onButtonPress.bind(this));
@@ -88,7 +96,7 @@ var _Draggable = new Lang.Class({
         this.actor.connect('destroy', () => {
             this._actorDestroyed = true;
 
-            if (this._dragInProgress && this._dragCancellable)
+            if (this._dragState == DragState.DRAGGING && this._dragCancellable)
                 this._cancelDrag(global.get_current_time());
             this.disconnectAll();
         });
@@ -100,7 +108,6 @@ var _Draggable = new Lang.Class({
         this._dragActorOpacity = params.dragActorOpacity;
 
         this._buttonDown = false; // The mouse button has been pressed and has not yet been released.
-        this._dragInProgress = false; // The drag has been started, and has not been dropped or cancelled yet.
         this._animationInProgress = false; // The drag is over and the item is in the process of animating to its original position (snapping back or reverting).
         this._dragCancellable = true;
 
@@ -206,9 +213,10 @@ var _Draggable = new Lang.Class({
             (event.type() == Clutter.EventType.TOUCH_END &&
              global.display.is_pointer_emulating_sequence(event.get_event_sequence()))) {
             this._buttonDown = false;
-            if (this._dragInProgress) {
+            if (this._dragState == DragState.DRAGGING) {
                 return this._dragActorDropped(event);
-            } else if (this._dragActor != null && !this._animationInProgress) {
+            } else if ((this._dragActor != null || this._dragState == DragState.CANCELLED) &&
+                       !this._animationInProgress) {
                 // Drag must have been cancelled with Esc.
                 this._dragComplete();
                 return Clutter.EVENT_STOP;
@@ -222,14 +230,14 @@ var _Draggable = new Lang.Class({
         } else if (event.type() == Clutter.EventType.MOTION ||
                    (event.type() == Clutter.EventType.TOUCH_UPDATE &&
                     global.display.is_pointer_emulating_sequence(event.get_event_sequence()))) {
-            if (this._dragInProgress) {
+            if (this._dragActor && this._dragState == DragState.DRAGGING) {
                 return this._updateDragPosition(event);
-            } else if (this._dragActor == null) {
+            } else if (this._dragActor == null && this._dragState != DragState.CANCELLED) {
                 return this._maybeStartDrag(event);
             }
         // We intercept KEY_PRESS event so that we can process Esc key press to cancel
         // dragging and ignore all other key presses.
-        } else if (event.type() == Clutter.EventType.KEY_PRESS && this._dragInProgress) {
+        } else if (event.type() == Clutter.EventType.KEY_PRESS && this._dragState == DragState.DRAGGING) {
             let symbol = event.get_key_symbol();
             if (symbol == Clutter.Escape) {
                 this._cancelDrag(event.get_time());
@@ -265,7 +273,7 @@ var _Draggable = new Lang.Class({
      */
     startDrag(stageX, stageY, time, sequence) {
         currentDraggable = this;
-        this._dragInProgress = true;
+        this._dragState = DragState.DRAGGING;
 
         // Special-case St.Button: the pointer grab messes with the internal
         // state, so force a reset to a reasonable state here
@@ -342,6 +350,13 @@ var _Draggable = new Lang.Class({
             Shell.util_set_hidden_from_pick(this._dragActor, true);
         }
 
+        this._dragActorDestroyId = this._dragActor.connect('destroy', () => {
+            // Cancel ongoing animation (if any)
+            this._finishAnimation();
+
+            this._dragActor = null;
+            this._dragState = DragState.CANCELLED;
+        });
         this._dragOrigOpacity = this._dragActor.opacity;
         if (this._dragActorOpacity != undefined)
             this._dragActor.opacity = this._dragActorOpacity;
@@ -500,7 +515,7 @@ var _Draggable = new Lang.Class({
                                                 event.get_time())) {
                     // If it accepted the drop without taking the actor,
                     // handle it ourselves.
-                    if (this._dragActor.get_parent() == Main.uiGroup) {
+                    if (this._dragActor && this._dragActor.get_parent() == Main.uiGroup) {
                         if (this._restoreOnSuccess) {
                             this._restoreDragActor(event.get_time());
                             return true;
@@ -508,7 +523,7 @@ var _Draggable = new Lang.Class({
                             this._dragActor.destroy();
                     }
 
-                    this._dragInProgress = false;
+                    this._dragState = DragState.INIT;
                     global.screen.set_cursor(Meta.Cursor.DEFAULT);
                     this.emit('drag-end', event.get_time(), true);
                     this._dragComplete();
@@ -557,20 +572,22 @@ var _Draggable = new Lang.Class({
 
     _cancelDrag(eventTime) {
         this.emit('drag-cancelled', eventTime);
-        this._dragInProgress = false;
-        let [snapBackX, snapBackY, snapBackScale] = this._getRestoreLocation();
+        let wasCancelled = (this._dragState == DragState.CANCELLED);
+        this._dragState = DragState.CANCELLED;
 
-        if (this._actorDestroyed) {
+        if (this._actorDestroyed || wasCancelled) {
             global.screen.set_cursor(Meta.Cursor.DEFAULT);
             if (!this._buttonDown)
                 this._dragComplete();
             this.emit('drag-end', eventTime, false);
-            if (!this._dragOrigParent)
+            if (!this._dragOrigParent && this._dragActor)
                 this._dragActor.destroy();
 
             return;
         }
 
+        let [snapBackX, snapBackY, snapBackScale] = this._getRestoreLocation();
+
         this._animateDragEnd(eventTime,
                              { x: snapBackX,
                                y: snapBackY,
@@ -581,7 +598,7 @@ var _Draggable = new Lang.Class({
     },
 
     _restoreDragActor(eventTime) {
-        this._dragInProgress = false;
+        this._dragState = DragState.INIT;
         let [restoreX, restoreY, restoreScale] = this._getRestoreLocation();
 
         // fade the actor back in at its original location
@@ -596,12 +613,6 @@ var _Draggable = new Lang.Class({
     _animateDragEnd(eventTime, params) {
         this._animationInProgress = true;
 
-        // finish animation if the actor gets destroyed
-        // during it
-        this._dragActorDestroyId =
-            this._dragActor.connect('destroy',
-                                    this._finishAnimation.bind(this));
-
         params['opacity']          = this._dragOrigOpacity;
         params['transition']       = 'easeOutQuad';
         params['onComplete']       = this._onAnimationComplete;
@@ -624,9 +635,6 @@ var _Draggable = new Lang.Class({
     },
 
     _onAnimationComplete(dragActor, eventTime) {
-        dragActor.disconnect(this._dragActorDestroyId);
-        this._dragActorDestroyId = 0;
-
         if (this._dragOrigParent) {
             Main.uiGroup.remove_child(this._dragActor);
             this._dragOrigParent.add_actor(this._dragActor);
@@ -641,7 +649,7 @@ var _Draggable = new Lang.Class({
     },
 
     _dragComplete() {
-        if (!this._actorDestroyed)
+        if (!this._actorDestroyed && this._dragActor)
             Shell.util_set_hidden_from_pick(this._dragActor, false);
 
         this._ungrabEvents();
@@ -652,7 +660,12 @@ var _Draggable = new Lang.Class({
             this._updateHoverId = 0;
         }
 
-        this._dragActor = undefined;
+        if (this._dragActor) {
+            this._dragActor.disconnect(this._dragActorDestroyId);
+            this._dragActor = null;
+        }
+
+        this._dragState = DragState.INIT;
         currentDraggable = null;
     }
 });
diff --git a/js/ui/tweener.js b/js/ui/tweener.js
index 1a85e2f..663b97b 100644
--- a/js/ui/tweener.js
+++ b/js/ui/tweener.js
@@ -69,30 +69,68 @@ function _getTweenState(target) {
     return target.__ShellTweenerState;
 }
 
+function _ensureHandlers(target) {
+    if (!target.__ShellTweenerHandlers)
+        target.__ShellTweenerHandlers = {};
+    return target.__ShellTweenerHandlers;
+}
+
 function _resetTweenState(target) {
     let state = target.__ShellTweenerState;
 
     if (state) {
-        if (state.destroyedId)
+        if (state.destroyedId) {
             state.actor.disconnect(state.destroyedId);
+            delete state.destroyedId;
+        }
     }
 
+    _removeHandler(target, 'onComplete', _tweenCompleted);
     target.__ShellTweenerState = {};
 }
 
 function _addHandler(target, params, name, handler) {
-    if (params[name]) {
-        let oldHandler = params[name];
-        let oldScope = params[name + 'Scope'];
-        let oldParams = params[name + 'Params'];
-        let eventScope = oldScope ? oldScope : target;
-
-        params[name] = () => {
-            oldHandler.apply(eventScope, oldParams);
-            handler(target);
-        };
-    } else
-        params[name] = () => { handler(target); };
+    let wrapperNeeded = false;
+    let tweenerHandlers = _ensureHandlers(target);
+
+    if (!(name in tweenerHandlers))
+    {
+        tweenerHandlers[name] = [];
+        wrapperNeeded = true;
+    }
+
+    let handlers = tweenerHandlers[name];
+    handlers.push(handler);
+
+    if (wrapperNeeded) {
+        if (params[name]) {
+            let oldHandler = params[name];
+            let oldScope = params[name + 'Scope'];
+            let oldParams = params[name + 'Params'];
+            let eventScope = oldScope ? oldScope : target;
+
+            params[name] = () => {
+                oldHandler.apply(eventScope, oldParams);
+                handlers.forEach((h) => h(target));
+            };
+        } else {
+            params[name] = () => { handlers.forEach((h) => h(target)); };
+        }
+    }
+}
+
+function _removeHandler(target, name, handler) {
+    let tweenerHandlers = _ensureHandlers(target);
+
+    if (name in tweenerHandlers) {
+        let handlers = tweenerHandlers[name];
+        let handlerIndex = handlers.indexOf(handler);
+
+        while (handlerIndex > -1) {
+            handlers.splice(handlerIndex, 1);
+            handlerIndex = handlers.indexOf(handler);
+        }
+    }
 }
 
 function _actorDestroyed(target) {
diff --git a/js/ui/workspace.js b/js/ui/workspace.js
index 8b56932..c148ccb 100644
--- a/js/ui/workspace.js
+++ b/js/ui/workspace.js
@@ -139,14 +139,8 @@ var WindowClone = new Lang.Class({
 
         this._windowClone._updateId = this.metaWindow.connect('size-changed',
             this._onRealWindowSizeChanged.bind(this));
-        this._windowClone._destroyId =
-            this.realWindow.connect('destroy', () => {
-                // First destroy the clone and then destroy everything
-                // This will ensure that we never see it in the
-                // _disconnectSignals loop
-                this._windowClone.destroy();
-                this.destroy();
-            });
+        this._windowClone._destroyId = this.realWindow.connect('destroy',
+            this.destroy.bind(this));
 
         this._updateAttachedDialogs();
         this._computeBoundingBox();
@@ -310,6 +304,14 @@ var WindowClone = new Lang.Class({
     },
 
     destroy() {
+        this.emit('destroy');
+
+        // First destroy the clone and then destroy everything
+        // This will ensure that we never see it in the _disconnectSignals loop
+        this.metaWindow.disconnect(this._windowClone._updateId);
+        this.realWindow.disconnect(this._windowClone._destroyId);
+        this._windowClone.destroy();
+
         this.actor.destroy();
     },
 
@@ -1131,6 +1133,7 @@ var Workspace = new Lang.Class({
         // Create clones for windows that should be
         // visible in the Overview
         this._windows = [];
+        this._windowsDestroyedIds = [];
         this._windowOverlays = [];
         for (let i = 0; i < windows.length; i++) {
             if (this._isOverviewWindow(windows[i])) {
@@ -1428,7 +1431,7 @@ var Workspace = new Lang.Class({
         return GLib.SOURCE_REMOVE;
     },
 
-    _doRemoveWindow(metaWin) {
+    _doRemoveWindow(metaWin, {cloneDestroy}={cloneDestroy: true}) {
         let win = metaWin.get_compositor_private();
 
         let clone = this._removeWindowClone(metaWin);
@@ -1792,7 +1795,11 @@ var Workspace = new Lang.Class({
             this._actualGeometryLater = 0;
         }
 
+        for (let index = 0; index < this._windows.length; ++index)
+            this._windows[index].disconnect(this._windowsDestroyedIds[index]);
+
         this._windows = [];
+        this._windowsDestroyedIds = [];
     },
 
     // Sets this.leavingOverview flag to false.
@@ -1859,6 +1866,7 @@ var Workspace = new Lang.Class({
             clone.setStackAbove(this._windows[this._windows.length - 1].actor);
 
         this._windows.push(clone);
+        this._windowsDestroyedIds.push(cloneDestroyedId);
         this._windowOverlays.push(overlay);
 
         return [clone, overlay];
diff --git a/js/ui/workspaceThumbnail.js b/js/ui/workspaceThumbnail.js
index 381169e..016dda6 100644
--- a/js/ui/workspaceThumbnail.js
+++ b/js/ui/workspaceThumbnail.js
@@ -70,12 +70,7 @@ var WindowClone = new Lang.Class({
 
         this.clone._updateId = this.metaWindow.connect('position-changed',
                                                        this._onPositionChanged.bind(this));
-        this.clone._destroyId = this.realWindow.connect('destroy', () => {
-            // First destroy the clone and then destroy everything
-            // This will ensure that we never see it in the _disconnectSignals loop
-            this.clone.destroy();
-            this.destroy();
-        });
+        this.clone._destroyId = this.realWindow.connect('destroy', this.destroy.bind(this));
         this._onPositionChanged();
 
         this.actor.connect('button-release-event',
@@ -142,6 +137,14 @@ var WindowClone = new Lang.Class({
     },
 
     destroy() {
+        this.emit('destroy');
+
+        // First destroy the clone and then destroy everything
+        // This will ensure that we never see it in the _disconnectSignals loop
+        this.metaWindow.disconnect(this.clone._updateId);
+        this.realWindow.disconnect(this.clone._destroyId);
+        this.clone.destroy();
+
         this.actor.destroy();
     },
 
@@ -285,6 +288,7 @@ var WorkspaceThumbnail = new Lang.Class({
 
         // Create clones for windows that should be visible in the Overview
         this._windows = [];
+        this._windowsDestroyedIds = [];
         this._allWindows = [];
         this._minimizedChangedIds = [];
         for (let i = 0; i < windows.length; i++) {
@@ -493,7 +497,11 @@ var WorkspaceThumbnail = new Lang.Class({
           this._bgManager = null;
         }
 
+        for (let index = 0; index < this._windows.length; ++index)
+            this._windows[index].disconnect(this._windowsDestroyedIds[index]);
+
         this._windows = [];
+        this._windowsDestroyedIds = [];
         this.actor = null;
     },
 
@@ -537,6 +545,7 @@ var WorkspaceThumbnail = new Lang.Class({
             clone.setStackAbove(this._windows[this._windows.length - 1].actor);
 
         this._windows.push(clone);
+        this._windowsDestroyedIds.push(cloneDestroyedId);
 
         return clone;
     },
