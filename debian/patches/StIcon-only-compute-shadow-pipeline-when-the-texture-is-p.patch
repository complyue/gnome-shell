From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Wed, 18 Oct 2017 12:32:22 +0200
Subject: StIcon: only compute shadow pipeline when the texture is properly
 allocated

Creating the shadow pipeline requires the actor to be allocated in order
to get its dimensions, however in the current state we just compute it
even if this is not the case.
This causes _st_create_shadow_pipeline_from_actor (when getting the allocation
box) to trigger an allocation cycle, which might lead to a convolution to
st_icon_finish_update causing breakage on data as soon as we return from it.

Generating it at paint if not done before, it's a way for avoiding this.

https://bugzilla.gnome.org/show_bug.cgi?id=788908

Bug-GNOME: https://bugzilla.gnome.org/show_bug.cgi?id=788908
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/gnome-shell/+bug/1723378
Forwarded: yes, https://gitlab.gnome.org/GNOME/gnome-shell/merge_requests/3
---
 src/st/st-icon.c | 48 +++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 37 insertions(+), 11 deletions(-)

diff --git a/src/st/st-icon.c b/src/st/st-icon.c
index 192df60..332e5b2 100644
--- a/src/st/st-icon.c
+++ b/src/st/st-icon.c
@@ -56,12 +56,15 @@ struct _StIconPrivate
 
   CoglPipeline *shadow_pipeline;
   StShadow     *shadow_spec;
+  ClutterSize   shadow_size;
 };
 
 G_DEFINE_TYPE_WITH_PRIVATE (StIcon, st_icon, ST_TYPE_WIDGET)
 
 static void st_icon_update               (StIcon *icon);
 static gboolean st_icon_update_icon_size (StIcon *icon);
+static void st_icon_update_shadow_pipeline (StIcon *icon);
+static void st_icon_clean_shadow_pipeline (StIcon *icon);
 
 #define DEFAULT_ICON_SIZE 48
 
@@ -164,18 +167,31 @@ st_icon_paint (ClutterActor *actor)
 
   if (priv->icon_texture)
     {
-      if (priv->shadow_pipeline)
-        {
+      if (priv->shadow_spec)
+       {
           ClutterActorBox allocation;
           float width, height;
 
           clutter_actor_get_allocation_box (priv->icon_texture, &allocation);
           clutter_actor_box_get_size (&allocation, &width, &height);
 
-          _st_paint_shadow_with_opacity (priv->shadow_spec,
-                                         priv->shadow_pipeline,
-                                         &allocation,
-                                         clutter_actor_get_paint_opacity (priv->icon_texture));
+          if (priv->shadow_pipeline == NULL ||
+              priv->shadow_size.width != width ||
+              priv->shadow_size.height != height)
+            {
+              st_icon_update_shadow_pipeline (ST_ICON (actor));
+
+              if (priv->shadow_pipeline)
+                clutter_size_init (&priv->shadow_size, width, height);
+            }
+
+          if (priv->shadow_pipeline)
+            {
+              _st_paint_shadow_with_opacity (priv->shadow_spec,
+                                            priv->shadow_pipeline,
+                                            &allocation,
+                                            clutter_actor_get_paint_opacity (priv->icon_texture));
+            }
         }
 
       clutter_actor_paint (priv->icon_texture);
@@ -189,7 +205,7 @@ st_icon_style_changed (StWidget *widget)
   StThemeNode *theme_node = st_widget_get_theme_node (widget);
   StIconPrivate *priv = self->priv;
 
-  g_clear_pointer (&priv->shadow_pipeline, cogl_object_unref);
+  st_icon_clean_shadow_pipeline (self);
   g_clear_pointer (&priv->shadow_spec, st_shadow_unref);
 
   priv->shadow_spec = st_theme_node_get_shadow (theme_node, "icon-shadow");
@@ -268,21 +284,31 @@ st_icon_init (StIcon *self)
 }
 
 static void
-st_icon_update_shadow_pipeline (StIcon *icon)
+st_icon_clean_shadow_pipeline (StIcon *icon)
 {
   StIconPrivate *priv = icon->priv;
 
   g_clear_pointer (&priv->shadow_pipeline, cogl_object_unref);
+  clutter_size_init (&priv->shadow_size, 0, 0);
+}
+
+static void
+st_icon_update_shadow_pipeline (StIcon *icon)
+{
+  StIconPrivate *priv = icon->priv;
+
+  st_icon_clean_shadow_pipeline (icon);
 
   if (priv->shadow_spec)
-   priv->shadow_pipeline = _st_create_shadow_pipeline_from_actor (priv->shadow_spec, priv->icon_texture);
+    priv->shadow_pipeline = _st_create_shadow_pipeline_from_actor (priv->shadow_spec, priv->icon_texture);
 }
 
 static void
 on_pixbuf_changed (ClutterTexture *texture,
                    StIcon         *icon)
 {
-  st_icon_update_shadow_pipeline (icon);
+  st_icon_clean_shadow_pipeline (icon);
+  clutter_actor_queue_redraw (CLUTTER_ACTOR (icon));
 }
 
 static void
@@ -307,7 +333,7 @@ st_icon_finish_update (StIcon *icon)
       /* Remove the temporary ref we added */
       g_object_unref (priv->icon_texture);
 
-      st_icon_update_shadow_pipeline (icon);
+      st_icon_clean_shadow_pipeline (icon);
 
       /* "pixbuf-change" is actually a misnomer for "texture-changed" */
       g_signal_connect_object (priv->icon_texture, "pixbuf-change",
